@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
} else 
{
<h3>ProductList</h3>

<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class="media my-3 d-flex">
            <div class="media-img-wrapper mr-2" style="min-width:200px">
                <a href="/product/@product.Id">
                    <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
                </a>
            </div>
            <div class="media-body">
                <a href="/product/@product.Id">
                    <h4 class="">@product.Title</h4>
                </a>
                <p>@product.Description</p>
                <h5 class="proce">
                    @GetPriceText(product)
                </h5>
            </div>
        </li>
    }
</ul>
}
@code {
    // private static List<Product> Products { get; set; } = new List<Product>();

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
        // await ProductService.GetProducts();
    }

    public void Dispose()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        } else if(variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
